单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。
单元解释：
	单元就是人为规定的最小的被测功能模块。

场景应用：
	通常而言，一个单元测试是用于判断某个特定条件（或者场景）下某个特定函数的行为。

临时单元测试:
	其实我们每天都在做单元测试。你写了一个函数，除了极简单的外，总是要执行一下，看看功能是否正常，有时还要想办法输出些数据，如弹出信息窗口什么的，这，也是单元测试，把这种单元测试称为临时单元测试。

临时单元测试的缺点：
	针对代码的测试很不完整，代码覆盖率要超过70%都很困难，未覆盖的代码可能遗留大量的细小的错误，这些错误还会互相影响，当BUG暴露出来的时候难于调试，大幅度提高后期测试和维护成本，也降低了开发商的竞争力

充分的单元测试：
	应专门编写测试代码，并与产品代码隔离。我认为，比较简单的办法是为产品工程建立对应的测试工程，为每个类建立对应的测试类，为每个函数（很简单的除外）建立测试函数。

面向对象 单元测试->单元==类
	一般认为，在结构化程序时代，单元测试所说的单元是指函数，在当今的面向对象时代，单元测试所说的单元是指类。

测试的目的是找错并最终排错 

TDD，即测试驱动开发，先编写测试代码，再进行开发。

输入数据

	测试用例的核心是输入数据

	对于某一程序，输入数据确定了，预期输出也就可以确定了，至于生成/销毁被测试对象和运行测试的语句，是所有测试用例都大同小异的。


	输入数据包括四类：参数、成员变量、全局变量、IO媒体

	前两类比较常用，后两类较少用

	把输入数据的所有可能取值都进行测试，是不可能也是无意义的，我们应该用一定的规则选择有代表性的数据作为输入数据，主要有三种：正常输入，边界输入，非法输入，每种输入

	正常输入
		例如字符串的Trim函数，功能是将字符串前后的空格去除，那么正常的输入可以有四类：前面有空格；后面有空格；前后均有空格；前后均无空格。

	边界输入
		上例中空字符串可以看作是边界输入。
		再如一个表示年龄的参数，它的有效范围是0-100，那么边界输入有两个：0和100。

	非法输入
		非法输入是正常取值范围以外的数据，或使代码不能完成正常功能的输入，如上例中表示年龄的参数，小于0或大于100都是非法输入，再如一个进行文件操作的函数，非法输入有这么几类：文件不存在；目录不存在；文件正在被其他程序打开；权限错误。

黑盒覆盖  
	用户角度

白盒覆盖 开发者角度
	针对程序的逻辑结构设计测试用例，用逻辑覆盖率来衡量测试的完整性。
逻辑单位主要有：语句、分支、条件、条件值、条件值组合，路径。

1.语句覆盖就是覆盖所有的语句，其他类推。另外还有一种判定条件覆盖，其实是分支覆盖与条件覆盖的组合，在此不作讨论。
2.条件有关的覆盖
	a.条件覆盖是指覆盖所有的条件表达式，即所有的条件表达式都至少计算一次，不考虑计算结果;
	b.条件值覆盖是指覆盖条件的所有可能取值，即每个条件的取真值和取假值都要至少计算一次；
3.





