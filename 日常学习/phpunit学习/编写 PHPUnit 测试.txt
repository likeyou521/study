编写 PHPUnit 测试

1.针对类 Class 的测试写在类 ClassTest中。

2.ClassTest（通常）继承自 PHPUnit\Framework\TestCase。

3.测试都是命名为 test* 的公用方法。

也可以在方法的文档注释块(docblock)中使用 @test 标注将其标记为测试方法。

4.在测试方法内，类似于 assertEquals()（参见 附录 A）这样的断言方法用来对实际值与预期值的匹配做出断言。


例 2.1: 用 PHPUnit 测试数组操作  
	断言 $this->assertEquals()  assertEmpty()  assertNotEmpty()  assertTrue() assertFalse()

例 2.2: 用 @depends 标注来表达依赖关系

	PHPUnit 不会更改测试的运行顺序，因此你需要自行保证某个测试所依赖的所有测试均出现于这个测试之前。

例 2.3: 利用测试之间的依赖关系  /** @depends方法名 **/  第二个方法可以用第一个方法的结果集

例 2.4: 有多重依赖的测试  /** @depends方法名  @depends方法名**/  func_get_args()  形参组成数组

例 2.5: 使用返回数组的数组的数据供给器
	/**@dataProvider additionProvider**/

	用 @dataProvider 标注来指定使用哪个数据供给器方法。

	数据供给器方法必须声明为 public，其返回值要么是一个数组，其每个元素也是数组(二维数组)；要么是一个实现了 Iterator 接口的对象，在对它进行迭代时每步产生一个数组。每个数组都是测试数据集的一部分，将以它的内容作为参数来调用测试方法。


例 2.6: 使用带有命名数据集的数据供给器

		当使用到大量数据集时，最好逐个用字符串键名对其命名，避免用默认的数字键名。这样输出信息会更加详细些，其中将包含打断测试的数据集所对应的名称。


/*****
例 2.7: 使用返回迭代器对象的数据供给器  不清楚


例 2.8: CsvFileIterator 类

例 2.9: 在同一个测试中组合使用 @depends 和 @dataProvider

******/

例 2.10: 使用 expectException() 方法

例 2.11: 使用 @expectedException 标注

例 2.12: 用 @expectedException 来预期 PHP 错误 

例 2.13: 对会引发PHP 错误的代码的返回值进行测试

例 2.14: 对函数或方法的输出进行测试
		想要断言（比如说）某方法的运行过程中生成了预期的输出
		$this->expectOutputString('foo'); 方法来设定所预期的输出。如果没有产生预期的输出，测试将计为失败。
例 2.15: 数组比较失败时生成的错误相关信息输出
		当有测试失败时，PHPUnit 全力提供尽可能多的有助于找出问题所在的上下文信息。
		$this->assertEquals(
            [1, 2,  3, 4, 5, 6],
            [1, 2, 33, 4, 5, 6]
        );

        Array (
		     0 => 1
		     1 => 2
		-    2 => 3
		+    2 => 33
		     3 => 4
		     4 => 5
		     5 => 6
		 )

例 2.16: 长数组比较失败时生成的错误相关信息输出
			当生成的输出很长而难以阅读时，PHPUnit 将对其进行分割，并在每个差异附近提供少数几行上下文信息。
			
例 2.17: 当使用弱比较时在生成的差异结果中出现的边缘情况
		当比较失败时，PHPUnit 为输入值建立文本表示，然后以此进行对比。这种实现导致在差异指示中显示出来的问题可能比实际上存在的多。

		这种情况只出现在对数组或者对象使用 assertEquals 或其他“弱”比较函数时。


		在编写测试时，最费时的部分之一是编写代码来将整个场景设置成某个已知的状态，并在测试结束后将其复原到初始状态。这个已知的状态称为测试的 基境(fixture)。




