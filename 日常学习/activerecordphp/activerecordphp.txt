init.php 初始化连接数据库

<?php
require_once dirname(__FILE__) . '/../../ActiveRecord.php';
// initialize ActiveRecord
// change the connection settings to whatever is appropriate for your mysql server 
ActiveRecord\Config::initialize(function($cfg)
{
    $cfg->set_model_directory('.');
    $cfg->set_connections(array('development' => 'mysql://root:root@127.0.0.1/test'));
});


1.如果直接 User 继承ActiveRecord\Model 的话  自动关联到 test数据库下的users
	指定表用重写方法   下面这个方法就是数据表user
	// explicit table name since our table is not "books"
	static $table_name = 'user';

	// explicit pk since our pk is not "id"
	static $primary_key = 'uid';

2.基本查询
 /*
*@brief 查
*/
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# using some conditions
	$users = User::find('all',array( 
							'conditions' => array('uid in (?)', array(2,3,4,5,6)),
							'conditions' => array('name like (?)', '%a%'),
							'order' => 'uid desc', 
							'group' => 'uid', 
							'having' => 'uid > 1',
							'limit' => 0
									) 
						);	
/*
*@brief 裸奔sql语句
**/
	$users = User::find_by_sql('select * from `user` where uid in(1,2,3,4,5) order by uid desc');
	foreach($users as $user)
	{
		echo '序号：'.$user->uid.'  姓名：'.$user->name.' 文章内容：'.$user->article->comment.' <br />'; 
	}

/**
*@brief 主键查询
*/
	$user = User::find(2);

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/*
* @brief 增 create 
**/
	$users = new User();
	$users->name = 'Mickey';
	$users->state = 1;
	$users->save();
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/*
* @brief 删 delete
**/
	$users = new User();
	$users->find(3)->delete();

#集合删除
	User::table()->delete(
				array('uid' => array(2,3,4)
						)
					);
uid in(2,3,4)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

/*
* @brief 改 update
**/
	$users = new User();
	$post = $users->find(1);
	$post->name='maike';
	$post->save();

# Model::table()->update(AttributesToUpdate, WhereToUpdate);
	$setname = array('name' => 'Massive title!');
	$whereid = array('uid' => array(6));
	User::table()->update($setname,$whereid);

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

3.ORM关联查询
	a.一对一
		针对外键来说  谁属于谁   谁有谁   
		user表 article表 
		article表外键uid属于user表 关联的话
		article的Model层：    	
			static $belongs_to = array(
				array('user')
			);

		user表有个article的外键uid
		user的Model层：
			static $has_one = array(array('article'));

	b.一对多
		
	c.多对多